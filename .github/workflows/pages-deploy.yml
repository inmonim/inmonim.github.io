name: "Build and Deploy"
on:
  push:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - README.md
      - LICENSE

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # submodules: true
          # If using the 'assets' git submodule from Chirpy Starter, uncomment above
          # (See: https://github.com/cotes2020/chirpy-starter/tree/main/assets)
      - name: Deploy to GitHub Pages
        run: |
          echo "<meta http-equiv='Cache-Control' content='no-cache, no-store, must-revalidate'>" > .nojekyll
        
      - name: Clear Bundler cache
        uses: actions/cache@v2
        with:
          path: |
            vendor/bundle
            ~/.bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: false
      - name: bundler install
        run: bundle install

      - name: npm install
        run: npm install && npm run build

      - name: Build site
        run: bundle exec jekyll b -d "_site${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: "production"

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "_site${{ steps.pages.outputs.base_path }}"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
      
      - name: Set up service account key
        run: echo "${{ secrets.GSC_SERVICE_ACCOUNT_KEY }}" > key.json
      
      - name: Authenticate with GCP
        run: gcloud auth activate-service-account --key-file=key.json
        
      - name: Trigger Google Search Console API
        run: |
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token)
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{"siteUrl": "'${{ secrets.SITE_URL }}'", "feedpath": "/sitemap.xml"}' \
            "https://searchconsole.googleapis.com/v1/sites/${{ secrets.SITE_URL }}/sitemaps"